// build/vite/resolve.ts
import { resolve } from "path";
function pathResolve(dir) {
  return resolve(process.cwd(), ".", dir);
}
var resolves = {
  alias: [
    // 国际化
    // {
    //   find: 'vue-i18n',
    //   replacement: 'vue-i18n/dist/vue-i18n.cjs.js',
    // },
    // /@/xxxx => src/xxxx
    {
      find: /\@\//,
      replacement: pathResolve("src") + "/"
    },
    // #/xxxx => types/xxxx
    {
      find: /\#\//,
      replacement: pathResolve("types") + "/"
    }
  ]
  // dedupe: ['vue'],
};
var resolve_default = resolves;

// build/vite/css.ts
var css = {
  // preprocessorOptions: {
  //   less: {
  //     modifyVars: {},
  //     javascriptEnabled: true,
  //   },
  // },
};
var css_default = css;

// build/vite/proxy.ts
var proxy = {
  // '/upload': {
  //   target: 'http://localhost:8001/upload',
  //   changeOrigin: true,
  //   ws: true,
  //   rewrite: (path) => path.replace(new RegExp(/^\/upload/), ''),
  // },
};
var proxy_default = proxy;

// build/vite/server.ts
var server = {
  // 服务配置
  // IP配置，支持从IP启动
  // host: true,
  host: "0.0.0.0",
  // 类型： number 指定服务器端口;
  port: 9090,
  // port: VITE_PORT,
  // 禁用或配置 HMR 连接 设置 server.hmr.overlay 为 false 可以禁用服务器错误遮罩层
  // hmr: { overlay: false },
  // 类型： boolean | string在服务器启动时自动在浏览器中打开应用程序；
  open: false,
  // 类型： boolean | CorsOptions 为开发服务器配置 CORS。默认启用并允许任何源
  cors: false,
  proxy: proxy_default
};
var server_default = server;

// build/vite/plugins/index.ts
import vue from "file:///E:/learning/build-vite/node_modules/.pnpm/@vitejs+plugin-vue@4.0.0_vite@4.0.4+vue@3.2.45/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueSetupExtend from "file:///E:/learning/build-vite/node_modules/.pnpm/vite-plugin-vue-setup-extend@0.4.0_vite@4.0.4/node_modules/vite-plugin-vue-setup-extend/dist/index.mjs";
import vueJsx from "file:///E:/learning/build-vite/node_modules/.pnpm/@vitejs+plugin-vue-jsx@3.0.0_vite@4.0.4+vue@3.2.45/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import windiCSS from "file:///E:/learning/build-vite/node_modules/.pnpm/vite-plugin-windicss@1.8.10_vite@4.0.4/node_modules/vite-plugin-windicss/dist/index.mjs";

// build/vite/plugins/autoImport.ts
import AutoImport from "file:///E:/learning/build-vite/node_modules/.pnpm/unplugin-auto-import@0.12.1_n5zljaqypctcmc3hxkjf4dgese/node_modules/unplugin-auto-import/dist/vite.js";
import { ElementPlusResolver } from "file:///E:/learning/build-vite/node_modules/.pnpm/unplugin-vue-components@0.22.12_rollup@3.9.1+vue@3.2.45/node_modules/unplugin-vue-components/dist/resolvers.mjs";
var AutoImportDeps = () => {
  return AutoImport({
    dts: "types/auto-imports.d.ts",
    imports: [
      "vue",
      "pinia",
      "vue-router",
      "@vueuse/core"
      // '@vueuse/head',
      // ''
      // {
      //   '@vueuse/core': [],
      // },
    ],
    resolvers: [ElementPlusResolver()]
  });
};

// build/vite/plugins/component.ts
import Components from "file:///E:/learning/build-vite/node_modules/.pnpm/unplugin-vue-components@0.22.12_rollup@3.9.1+vue@3.2.45/node_modules/unplugin-vue-components/dist/vite.mjs";
import {
  ElementPlusResolver as ElementPlusResolver2,
  VantResolver,
  VueUseComponentsResolver,
  AntDesignVueResolver
} from "file:///E:/learning/build-vite/node_modules/.pnpm/unplugin-vue-components@0.22.12_rollup@3.9.1+vue@3.2.45/node_modules/unplugin-vue-components/dist/resolvers.mjs";
var AutoRegistryComponents = () => {
  return Components({
    dirs: ["src/components"],
    extensions: ["vue", "tsx"],
    deep: true,
    dts: "types/components.d.ts",
    directoryAsNamespace: false,
    globalNamespaces: [],
    directives: true,
    importPathTransform: (v) => v,
    allowOverrides: false,
    include: [/\.vue$/, /\.vue\?vue/],
    exclude: [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/, /[\\/]\.nuxt[\\/]/],
    resolvers: [
      ElementPlusResolver2(),
      VueUseComponentsResolver(),
      VantResolver(),
      AntDesignVueResolver()
    ]
    // version: 2,
  });
};

// build/vite/plugins/svg.ts
import { createSvgIconsPlugin } from "file:///E:/learning/build-vite/node_modules/.pnpm/vite-plugin-svg-icons@2.0.1_vite@4.0.4/node_modules/vite-plugin-svg-icons/dist/index.mjs";
import path from "path";
var svgDev = () => {
  return createSvgIconsPlugin({
    // 指定需要缓存的图标文件夹
    iconDirs: [path.resolve(process.cwd(), "src/assets/icons")],
    // 是否压缩
    // svgoOptions: isBuild,
    svgoOptions: true,
    // 指定symbolId格式
    symbolId: "icon-[dir]-[name]"
  });
};

// build/vite/plugins/index.ts
function createVitePlugins() {
  const plugins = [
    // vue支持
    vue(),
    // JSX支持
    vueJsx(),
    // setup语法糖组件名支持
    vueSetupExtend()
  ];
  plugins.push(AutoImportDeps());
  plugins.push(AutoRegistryComponents());
  plugins.push(svgDev());
  plugins.push(windiCSS());
  return plugins;
}

// vite.config.ts
var vite_config_default = () => {
  const base = "/";
  const root = process.cwd();
  const plugins = createVitePlugins();
  return {
    base,
    root,
    resolve: resolve_default,
    plugins,
    css: css_default,
    server: server_default
  };
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
